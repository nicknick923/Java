/**

 @author Nick Sosinski
 @author Jake Ira
 */
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.io.*;

public class Prog5GUI extends java.awt.Frame implements java.awt.event.ActionListener
{

   private int deaths = 0;
   private int deathsThisLevel = 0;
   private int level = 1;  //start user at level 1
   private int timeSpentOnLevel = 0;
   private int timePlayed = 0;
   private final int gameSpeed = 100;
   private final int milisecondsInASecond = 1000;
   private final int levelOffset = 5;
   private final int enemiesPerLevel = 2;
   private final boolean alternateDrawMethod = true;
   private final listOfPFigures figureList;
   private final javax.swing.Timer moveTimer = new javax.swing.Timer(gameSpeed, this);
   private final String levelWinSoundFile = "tada.wav";
   private final String playerDeathSoundFile = "Windows Critical Stop.wav";
   private final String pauseSoundFile = "Speech Sleep.wav";
   private final String unpauseSoundFile = "Speech On.wav";
   private static final String highScoreFile = "HS.dat";
   private static String user = "default";
   private static PrintWriter pw;
   private boolean wasPaused;
   private static boolean HSFileOpen = false;
   private static boolean rounds = true;

   /**
    This constructor creates and displays the Prog5GUI then sets up the figure
    list, starts the timer, and sets up the first level.
    */
   public Prog5GUI()
   {
      initComponents();
      openHS();
      userNameTextField.setText(user);
      figureList = new listOfPFigures(gamePanel, rounds);
      moveTimer.start();
      componetResized(null);
      setLevel();
      updateDeathInfo();
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
   private void initComponents()
   {

      gamePanel = new java.awt.Panel();
      deathCountField = new java.awt.TextField();
      timeField = new java.awt.TextField();
      userNameTextField = new java.awt.TextField();

      setMinimumSize(new java.awt.Dimension(1130, 700));
      addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentResized(java.awt.event.ComponentEvent evt)
         {
            componetResized(evt);
         }
      });
      addWindowListener(new java.awt.event.WindowAdapter()
      {
         public void windowClosing(java.awt.event.WindowEvent evt)
         {
            exitForm(evt);
         }
      });
      setLayout(null);

      gamePanel.setBackground(new java.awt.Color(200, 200, 200));
      gamePanel.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyPressed(java.awt.event.KeyEvent evt)
         {
            gamePanelKeyDown(evt);
         }

         public void keyReleased(java.awt.event.KeyEvent evt)
         {
            gamePanelKeyUp(evt);
         }
      });
      gamePanel.setLayout(null);
      add(gamePanel);
      gamePanel.setBounds(10, 60, 760, 230);

      deathCountField.setEditable(false);
      deathCountField.setName("deathCountField"); // NOI18N
      deathCountField.addFocusListener(new java.awt.event.FocusAdapter()
      {
         public void focusGained(java.awt.event.FocusEvent evt)
         {
            deathCountFieldtransferFocus(evt);
         }
      });
      add(deathCountField);
      deathCountField.setBounds(10, 40, 120, 20);

      timeField.setBackground(new java.awt.Color(240, 240, 240));
      timeField.setEditable(false);
      timeField.setName("timeField"); // NOI18N
      timeField.addFocusListener(new java.awt.event.FocusAdapter()
      {
         public void focusGained(java.awt.event.FocusEvent evt)
         {
            timeFieldTransferFocus(evt);
         }
      });
      add(timeField);
      timeField.setBounds(140, 40, 150, 20);

      userNameTextField.setBackground(new java.awt.Color(240, 240, 240));
      userNameTextField.setName("userNameTextField"); // NOI18N
      userNameTextField.addFocusListener(new java.awt.event.FocusAdapter()
      {
         public void focusGained(java.awt.event.FocusEvent evt)
         {
            userNameTextFocused(evt);
         }

         public void focusLost(java.awt.event.FocusEvent evt)
         {
            userNameTextLostFocus(evt);
         }
      });
      userNameTextField.addTextListener(new java.awt.event.TextListener()
      {
         public void textValueChanged(java.awt.event.TextEvent evt)
         {
            userNameTextChanged(evt);
         }
      });
      add(userNameTextField);
      userNameTextField.setBounds(300, 40, 70, 20);

      pack();
   }// </editor-fold>                        

   /**
    Exit the Application
    */
   private void exitForm(java.awt.event.WindowEvent evt)
   {
      pw.close();
      System.exit(0);
   }

   public static void openHS()
   {
      try
      {
         pw = new PrintWriter(new FileWriter(highScoreFile, true));
         HSFileOpen = true;
      }
      catch (Exception e)
      {
         HSFileOpen = false;
      }
   }

   public static void closeHS()
   {
      if (HSFileOpen)
         pw.close();
      HSFileOpen = false;
   }

   public static boolean isHSFileOpen()
   {
      return HSFileOpen;
   }

   private void pause()
   {
      moveTimer.stop();
      playSound(pauseSoundFile);
   }

   private void unpause()
   {
      moveTimer.start();
      playSound(unpauseSoundFile);
   }

   private void gamePanelKeyDown(java.awt.event.KeyEvent evt)
   {
      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ESCAPE || evt.getKeyCode() == java.awt.event.KeyEvent.VK_SPACE)
         if (moveTimer.isRunning())
            pause();
         else
            unpause();
      else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_HOME)
         userWonLevel();
      else
         scanMan.keyDownReciver(evt);
   }

   private void gamePanelKeyUp(java.awt.event.KeyEvent evt)
   {
      scanMan.keyUpReciver(evt);
   }

   private void componetResized(java.awt.event.ComponentEvent evt)
   {
      gamePanel.setSize(getWidth() - 20, getHeight() - 70);
   }

   private void deathCountFieldtransferFocus(java.awt.event.FocusEvent evt)
   {
      gamePanel.requestFocus();
   }

   private void timeFieldTransferFocus(java.awt.event.FocusEvent evt)
   {
      gamePanel.requestFocus();
   }

   private void userNameTextChanged(java.awt.event.TextEvent evt)
   {
      if (!userNameTextField.getText().equals(""))
         user = userNameTextField.getText();
   }

   private void userNameTextFocused(java.awt.event.FocusEvent evt)
   {
      wasPaused = !moveTimer.isRunning();
      if (moveTimer.isRunning())
         pause();
   }

   private void userNameTextLostFocus(java.awt.event.FocusEvent evt)
   {
      if (!wasPaused)
         unpause();
   }

   /**
    This method tries to play the sound file that is passed in, and if it
    cant, it outputs the error to the error output.

    @param filePath The sound files path.
    */
   public static void playSound(String filePath)
   {
      try
      {
         java.io.File soundFile = new java.io.File(filePath);
         javax.sound.sampled.AudioInputStream audioIn = javax.sound.sampled.AudioSystem.getAudioInputStream(soundFile);
         javax.sound.sampled.Clip clip = javax.sound.sampled.AudioSystem.getClip();
         clip.open(audioIn);
         clip.start();
      }
      catch (IOException e)
      {
         System.err.println("Minor problem: File could not be played:");
         System.err.println(e.toString() + "\n");
      }
      catch (Exception e)
      {
         System.err.println("Other problem:\n" + e.toString());
      }
   }

   /**
    This method increments the level, resets the timeSpentOnLevel counter, and
    calls to set up the next level.
    */
   private void userWonLevel()
   {
      pw.println(user + ", " + level + ", " + deathsThisLevel + ", " + (timeSpentOnLevel / milisecondsInASecond));
      level++;
      timeSpentOnLevel = 0;
      deathsThisLevel = 0;
      updateDeathInfo();
      setLevel();
   }

   /**
    This method sets the death information text.
    */
   private void updateDeathInfo()
   {
      if (deaths == 1)
         deathCountField.setText("Level " + level + ", 1 Death");
      else
         deathCountField.setText("Level " + level + ", " + deaths + " Deaths");
   }

   private void updateTimeInfo()
   {
      timeField.setText("Total:" + (timePlayed / milisecondsInASecond)
            + "/This Level:" + (timeSpentOnLevel / milisecondsInASecond));
   }

   /**
    This method calculates the number of enemies the current level should
    have.

    @return The number of enemies the current level should have.
    */
   private int numberOfEnimies()
   {
      /*
       Examples if levelOffset = 5 and enemiesPerLevel = 2:
       level 1: ((1+5)*2)-2 = (6*2)-2 = 12-2 = 10
       level 2: ((2+5)*2)-2 = (7*2)-2 = 14-2 = 12
       level 3: ((3+5)*2)-2 = (8*2)-2 = 16-2 = 14
       */
      return ((level + levelOffset) * enemiesPerLevel) - 2;
   }

   /**
    This method prepares the panel for playing based on what the level is. It
    does this by reseting the figure list, adding the player figure, the goal
    figure, then randomly creates the correct number of enemies, which are
    randomly either deathDroid's or deathApple's.
    */
   private void setLevel()
   {
      figureList.resetList();
      figureList.addFigure(new scanMan(gamePanel));
      figureList.addFigure(new goalFigure(gamePanel));
      for (int i = 0; i < numberOfEnimies(); i++)
         if (Math.random() > .5)
            figureList.addFigure(new deathDroid(gamePanel));
         else
            figureList.addFigure(new deathApple(gamePanel));
   }

   /**
    This method is the main method of the program and it creates and runs the
    program.

    @param args the command line arguments (not used).
    */
   public static void main(String args[])
   {
      try
      {
         if (args[0].equals("rounds"))
            rounds = true;
         else
            rounds = false;
      }
      catch (Exception e)
      {
      }

      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new Prog5GUI().setVisible(true);
         }
      });
   }

   /**
    This method is called every time the timer ticks and it increments both
    the time on the level and total time played by the timer interval, updates
    the time info, draws all of the figures, and checks for user collisions..

    @param ae The events data (not used).
    */
   @Override
   public void actionPerformed(ActionEvent ae)
   {
      timePlayed += gameSpeed;
      timeSpentOnLevel += gameSpeed;
      updateTimeInfo();
      figureList.drawAll(alternateDrawMethod);
      userCollideCheck();
   }

   /**
    This method checks to see if the user hit any PFigures and if so, it
    responds with the appropriate actions: If the user hit the goal, it plays
    the win sound and calls the userWonLevel method, if it hit an enemyFigure,
    it increments deaths, updates death info, plays the death sound, and
    resets the level.
    */
   private void userCollideCheck()
   {
      PFigure hitObject = figureList.userHitObject();
      if (hitObject != null)
         if (hitObject instanceof goalFigure)
         {
            playSound(levelWinSoundFile);
            userWonLevel();
         }
         else if (hitObject instanceof enemyFigure)
         {
            deaths++;
            deathsThisLevel++;
            updateDeathInfo();
            playSound(playerDeathSoundFile);
            setLevel();
         }
   }
   // Variables declaration - do not modify                     
   private java.awt.TextField deathCountField;
   private java.awt.Panel gamePanel;
   private java.awt.TextField timeField;
   private java.awt.TextField userNameTextField;
   // End of variables declaration                   
}
